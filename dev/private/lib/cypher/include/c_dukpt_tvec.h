/*******************************************************************************
**
**	V300b Updated Board Support Package
**	$Id$
**
**	COPYRIGHT INFORMATION:
**		This software is proprietary and confidential.
**		By using this software you agree to the terms and conditions of the
**		associated Lumidigm Inc. License Agreement.
**
**		(c) Copyright 2014 Lumidigm, Inc. (Unpublished Copyright) ALL RIGHTS RESERVED.
**
*******************************************************************************/
#pragma once

/*
**	Little Endian Key Masks
*/
SECTION_SDRAM0_BANK1	// NOT SPEED CRITICAL
//static u8 pIV[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
SECTION_SDRAM0_BANK1	// NOT SPEED CRITICAL
static u8 KEYMASK[] = { 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0 };
SECTION_SDRAM0_BANK1	// NOT SPEED CRITICAL
static u8 PEKMASK[] = { 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
SECTION_SDRAM0_BANK1	// NOT SPEED CRITICAL
static u8 MAC_MASK[] = { 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
SECTION_SDRAM0_BANK1	// NOT SPEED CRITICAL
static u8 DATA_MASK[] = { 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00 };

/*
**	KAT Format
*/
typedef struct
{
	u8	KSN[10];
	u8	BDK[16],
		IPEK[16],
		SK[16];
} Test_Vect_Type;

/*
**	Known Answer Tests for IPEK Derivation from BDK
*/
SECTION_SDRAM0_BANK1	// NOT SPEED CRITICAL
const Test_Vect_Type KAT = {
	{ 0x08, 0x00, 0x0E0, 0x10, 0x32, 0x54, 0x76, 0x98, 0xFF, 0xFF },									// KSN (input)	
	{ 0x10, 0x32, 0x54, 0x76, 0x98, 0xBA, 0xDC, 0xFE, 0xEF, 0xCD, 0xAB, 0x89, 0x67, 0x45, 0x23, 0x01 },	// BDK (input)
	{ 0x3A, 0x93, 0xD5, 0xD7, 0xA3, 0xB3, 0x8A, 0x85, 0x4D, 0x5B, 0x31, 0xA1, 0xFA, 0x92, 0xC2, 0x6A },	// IPEK (output)
	{ 0x7F, 0x42, 0xEB, 0xED, 0x20, 0x61, 0x6F, 0xAA, 0x1E, 0x62, 0xFF, 0x44, 0x52, 0x6D, 0xF6, 0x27 } };	// SK   (output)

/*
**	Known Answer Data Message, Non-Mod of BlkSize to Test Padding
*/
static u8 tvec[] = {
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
	0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
	0x17, 0x18
};



/*
*
**	Encrypted PIN Block Known Answer Test - Little Endian format
*/
//SECTION_SDRAM0_BANK1	// NOT SPEED CRITICAL
//static u8 clearEPB[] = {
//  0x6F, 0x87, 0xa9, 0xcb, 0xed, 0x74, 0x12, 0x04				// Clear Text
//};

/*
**	Big Endian format
*/
//SECTION_SDRAM0_BANK1	// NOT SPEED CRITICAL
//static u8 clearEPB_BE[] = {
//  0x04, 0x12, 0x74, 0xed, 0xcb, 0xa9, 0x87, 0x6F				// Clear Text
//};


//section("sdram0_bank1")	// NOT SPEED CRITICAL
//static u8 clearDATA[24] = { 
//	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x37,
//	0x38,0x39,0x44,0x39,0x30,0x39,0x38,0x37,
//	0x36,0x35,0x34,0x33,0x32,0x31,0x30,0x34
//};


// Little Endian format
SECTION_SDRAM0_BANK1	// NOT SPEED CRITICAL
static u8 katEPB[][8] = {
	{ 0x7A, 0x3A, 0x99, 0xEB, 0x45, 0x18, 0x9C, 0x1B }, 			// Encrypted Pin Blocks
	{ 0x07, 0x91, 0xC6, 0x02, 0x8D, 0x1C, 0xA0, 0x10 },
	{ 0x66, 0xB4, 0x97, 0x47, 0xB9, 0x07, 0xDC, 0x18 },
	{ 0xF7, 0x5D, 0x64, 0xD5, 0x09, 0x95, 0xC7, 0x0B },
	{ 0x0E, 0x83, 0xC5, 0x0A, 0xAD, 0x88, 0xEC, 0x73 },
	{ 0x71, 0x7B, 0x92, 0xF8, 0x09, 0x6F, 0xFC, 0xDE },
	{ 0x9D, 0x5C, 0x83, 0x3F, 0x00, 0xBF, 0x86, 0x3A }
};

// Big Endian format
//SECTION_SDRAM0_BANK1	// NOT SPEED CRITICAL
//static u8 katEPB_BE[][8] = {
//	{ 0x1B, 0x9C, 0x18, 0x45, 0xEB, 0x99, 0x3A, 0x7A }, 			// Encrypted Pin Blocks
//	{ 0x10, 0xA0, 0x1C, 0x8D, 0x02, 0xC6, 0x91, 0x07 },
//	{ 0x18, 0xDC, 0x07, 0xB9, 0x47, 0x97, 0xB4, 0x66 },
//	{ 0x0B, 0xC7, 0x95, 0x09, 0xD5, 0x64, 0x5D, 0xF7 },
//	{ 0x73, 0xEC, 0x88, 0xAD, 0x0A, 0xC5, 0x83, 0x0E },
//	{ 0xDE, 0xFC, 0x6F, 0x09, 0xF8, 0x92, 0x7B, 0x71 },
//	{ 0x3A, 0x86, 0xBF, 0x00, 0x3F, 0x83, 0x5C, 0x9D }
//};


SECTION_SDRAM0_BANK1	// NOT SPEED CRITICAL
static u8 katKSN[][10] =
{
	{ 0x01, 0x00, 0xE0, 0x10, 0x32, 0x54, 0x76, 0x98, 0xFF, 0xFF },	// Associated KSN
	{ 0x02, 0x00, 0xE0, 0x10, 0x32, 0x54, 0x76, 0x98, 0xFF, 0xFF },
	{ 0x03, 0x00, 0xE0, 0x10, 0x32, 0x54, 0x76, 0x98, 0xFF, 0xFF },
	{ 0x04, 0x00, 0xE0, 0x10, 0x32, 0x54, 0x76, 0x98, 0xFF, 0xFF },
	{ 0x00, 0x00, 0xF0, 0x10, 0x32, 0x54, 0x76, 0x98, 0xFF, 0xFF },
	{ 0x00, 0xFC, 0xEF, 0x10, 0x32, 0x54, 0x76, 0x98, 0xFF, 0xFF },
	{ 0x01, 0xF8, 0xEF, 0x10, 0x32, 0x54, 0x76, 0x98, 0xFF, 0xFF },
};


SECTION_SDRAM0_BANK1	// NOT SPEED CRITICAL
static u8 clearData[] = {
	0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x34
};

SECTION_SDRAM0_BANK1	// NOT SPEED CRITICAL
static u8 clearData_BE[] = {
	0x34, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36
};


// Little Endian format
SECTION_SDRAM0_BANK1	// NOT SPEED CRITICAL
static u8 katEncryptedData[][8] = {
	{ 0x9E, 0xDA, 0x1F, 0xEA, 0xB7, 0x53, 0x0D, 0xFC }, 			// Encrypted Data (using DATA key)
	{ 0xD6, 0x63, 0x6E, 0x84, 0x0F, 0xE7, 0xB4, 0xA2 },
	{ 0xB6, 0x75, 0x0E, 0xF1, 0x65, 0x1E, 0x75, 0xBD },
	{ 0xBD, 0x1B, 0x44, 0x47, 0x09, 0xF5, 0x18, 0x11 },
	{ 0x1E, 0x17, 0xFC, 0x53, 0x7F, 0x0E, 0x83, 0x1E },
	{ 0xE3, 0x77, 0xB2, 0x45, 0xBC, 0x73, 0xC7, 0xA2 },
	{ 0xED, 0xB4, 0xB2, 0xB3, 0xDB, 0x4F, 0x37, 0x55 }
};

// Big Endian format
SECTION_SDRAM0_BANK1	// NOT SPEED CRITICAL
static u8 katEncryptedData_BE[][8] = {
	{ 0xFC, 0x0D, 0x53, 0xB7, 0xEA, 0x1F, 0xDA, 0x9E }, 			// Encrypted Data (using DATA key)
	{ 0xA2, 0xB4, 0xE7, 0x0F, 0x84, 0x6E, 0x63, 0xD6 },
	{ 0xBD, 0x75, 0x1E, 0x65, 0xF1, 0x0E, 0x75, 0xB6 },
	{ 0x11, 0x18, 0xF5, 0x09, 0x47, 0x44, 0x1B, 0xBD },
	{ 0x1E, 0x83, 0x0E, 0x7F, 0x53, 0xFC, 0x17, 0x1E },
	{ 0xA2, 0xC7, 0x73, 0xBC, 0x45, 0xB2, 0x77, 0xE3 },
	{ 0x55, 0x37, 0x4F, 0xDB, 0xB3, 0xB2, 0xB4, 0xED }
};
